#!/usr/bin/env node

// Generates entry.tp JSON file.
// usage: node gen_entry.js [-v <plugin.version.numbers>] [-o <output/path or - for stdout>] [-d]
// A version number is required; By default it is read from the version.json file if it is present in this folder (generated by CMake from version.json.in).
// -d (dev/debug mode) will exclude the plugin_start commands in the TP file, for running the binary separately.
// Default output path depends on -d flag; if present assumes dist/Debug, otherwise dist/Release.

const fs = require('fs');
const path = require('path');
// import { fs } from 'fs';
// import { path } from 'path';

const buildInfo = fs.existsSync("./version.json") ? JSON.parse(fs.readFileSync("./version.json", "utf8")) : {};

// Defaults
var VERSION = buildInfo.VERSION_STR;
var VERSION_NUM = parseInt(buildInfo.VERSION_NUM, 16);
var OUTPUT_PATH = "";
var DEV_MODE = false;

// Const
const PLUGIN_ID = buildInfo.PLUGIN_ID;
const SYSTEM_NAME = buildInfo.SYSTEM_NAME;
const SHORT_NAME = buildInfo.SHORT_NAME;

// Handle CLI arguments
for (let i=2; i < process.argv.length; ++i) {
    const arg = process.argv[i];
    if      (arg == "-v") VERSION = process.argv[++i];
    else if (arg == "-o") OUTPUT_PATH = process.argv[++i];
    else if (arg == "-d") DEV_MODE = true;
}

// Validate the version
if (!VERSION) {
    console.error("No plugin version number, cannot continue :( \n Use -v <version.number> argument.");
    process.exit(1);
}

// Create integer version number from dotted notation in form of ((MAJ << 24) | (MIN << 16) | (PATCH << 8) | BUILD)
// Each version part is limited to the range of 0-99.
var iVersion = VERSION_NUM || 0;
if (!iVersion) {
    for (const part of VERSION.split('-', 1)[0].split('.', 4))
        iVersion = iVersion << 8 | (parseInt(part) & 0xFF);
}

// Set default output path if not specified, based on debug/release type.
if (!OUTPUT_PATH)
    OUTPUT_PATH = path.join(__dirname, "..", "dist", (DEV_MODE ? "Debug" : buildInfo.PLATFORM_OS));

// --------------------------------------
// Define the base entry.tp object here

const entry_base =
{
    sdk: 6,
    version: parseInt(iVersion.toString(16)),
    name: SHORT_NAME,
    id: PLUGIN_ID,
    plugin_start_cmd: DEV_MODE ? undefined : 'sh %TP_PLUGIN_FOLDER%' + SYSTEM_NAME + '/start.sh',
    plugin_start_cmd_windows: DEV_MODE ? undefined : '"%TP_PLUGIN_FOLDER%' + SYSTEM_NAME + '/bin/' + SYSTEM_NAME + '"',
    configuration: {
        colorDark: "#1D3345",
        colorLight: "#305676",
        parentCategory: "misc"
    },
    settings: [
        {
            name: "Script Files Base Directory",
            desc: "Paths to script/module files in actions will be relative to this directory, instead of the plugin's installation folder.",
            type: "text",
            default: "",
            readOnly: false
        },
        {
            name: "Load Script At Startup",
            desc: "Optional script file to load at plugin startup, after Touch Portal has connected. This gets loaded into the Shared Engine instance. " +
                "Absolute path or relative to Script File Base Directory.",
            type: "text",
            default: "",
            readOnly: false
        },
        {
            name: "Settings Version",
            desc: "Read-only property to track the last installed plugin version.",
            type: "text",
            default: "",
            readOnly: true
        }
    ],
    categories: [
        {
            id: PLUGIN_ID + ".cat.actions",
            name: SHORT_NAME,
            imagepath: '%TP_PLUGIN_FOLDER%' + SYSTEM_NAME + '/icon.png',
            states: [],
            actions: [],
            connectors: [],
            events: [
                {
                    id: PLUGIN_ID + ".event.pluginState",
                    name: "Plugin running state change",
                    format: "When the plugin runnings state changes to $val",
                    type: "communicate",
                    valueType: "choice",
                    valueStateId: PLUGIN_ID + ".state.pluginState",
                    valueChoices: ["Stopped", "Starting", "Started"],
                },
            ]
        },
        {
            id: PLUGIN_ID + ".cat.plugin",
            name: "Plugin",
            imagepath: '%TP_PLUGIN_FOLDER%' + SYSTEM_NAME + '/icon.png',
            states: [
                {
                    id: PLUGIN_ID + ".state.createdStatesList",
                    type: "text",
                    desc : SHORT_NAME + ": List of created script instances",
                    default : ""
                },
                {
                    id: PLUGIN_ID + ".state.lastError",
                    type: "text",
                    desc : SHORT_NAME + ": Last script instance error",
                    default : ""
                },
                {
                    id: PLUGIN_ID + ".state.errorCount",
                    type: "text",
                    desc : SHORT_NAME + ": Cumulative script error count",
                    default : ""
                },
                {
                    id: PLUGIN_ID + ".state.actRepeatDelay",
                    type: "text",
                    desc : SHORT_NAME + ": Default held action Repeat Delay (ms)",
                    default : ""
                },
                {
                    id: PLUGIN_ID + ".state.actRepeatRate",
                    type: "text",
                    desc : SHORT_NAME + ": Default held action Repeat Rate (ms)",
                    default : ""
                },
                {
                    id: PLUGIN_ID + ".state.tpDataPath",
                    type: "text",
                    desc : SHORT_NAME + ": Touch Portal data folder (current user)",
                    default : ""
                },
                {
                    id: PLUGIN_ID + ".state.currentPage",
                    type: "text",
                    desc : SHORT_NAME + ": Name of Page currently active on TP device",
                    default : ""
                },
                {
                    id: PLUGIN_ID + ".state.pluginState",
                    type: "choice",
                    desc : SHORT_NAME + ": Plugin running state",
                    default : "Unknown",
                    valueChoices: ["Stopped", "Starting", "Started"]
                },
            ],
            actions: [],
            connectors: [],
            events: []
        },
        {
            id: PLUGIN_ID + ".cat.values",
            name: "Dynamic Values",
            imagepath: '%TP_PLUGIN_FOLDER%' + SYSTEM_NAME + '/icon.png',
            states: [],
            actions: [],
            connectors: [],
            events: []
        }
    ]
};


// Default category to place actions and connectors into.
const category = entry_base.categories[0];


// Some space characters useful for forcing specific spacing in action formats/descriptions.
const SP = " ";   // non-breaking narrow space U+202F (TP ignores "no-break space" U+00AD)
const EN = " ";  // en quad space U+2000  (.5em wide)
const EM = " "; // em quad space U+2001  (1em wide)

// --------------------------------------
// Helper functions

// Replaces {N} placeholders with N value from args array/tuple.
String.prototype.format = function (args) {
    if (!Array.isArray(args))
        args = new Array(args);
    return this.replace(/{([0-9]+)}/g, function (match, index) {
        return typeof args[index] == 'undefined' ? match : args[index];
    });
};

// Functions for adding actions/connectors.

function addAction(id, name, descript, format, data, hold = false) {
    const action = {
        id: PLUGIN_ID + '.act.' + id,
        prefix: SHORT_NAME,
        name: name,
        type: "communicate",
        tryInline: true,
        description: descript,
        format: String(format).format(data?.map(d => `{$${d.id}$}`)),
        hasHoldFunctionality: hold,
        data: data ? data.map(a => ({...a})) : []
    }
    addVersionData(id, action.data);
    category.actions.push(action);
}

// note that 'description' field is not actually used by TP as of v3.1
function addConnector(id, name, descript, format, data) {
    const action = {
        id: PLUGIN_ID + '.conn.' + id,
        name: name,
        description: descript,
        format: String(format).format(data.map(d => `{$${d.id}$}`)),
        data: data ? data.map(a => ({...a})) : []
    }
    addVersionData(id, action.data);
    category.connectors.push(action);
}

function addVersionData(id, data) {
    data.push(makeActionData(id + ".version", "number", "v", iVersion));
}

// Functions which create action/connector data members.

function makeActionData(id, type, label = "", deflt = "") {
    return {
        id: PLUGIN_ID + '.act.' + id,
        type: type,
        label:  label,
        default: deflt
    };
}

function makeTextData(id, label, dflt = "") {
    return makeActionData(id, "text", label, dflt + '');
}

function makeFileData(id, label, dflt = "") {
    return makeActionData(id, "file", label, dflt + '');
}

function makeChoiceData(id, label, choices, dflt) {
    const d = makeActionData(id, "choice", label, typeof dflt === "undefined" ? choices[0] : dflt);
    d.valueChoices = choices;
    return d;
}

function makeNumericData(id, label, dflt, min, max, allowDec = true) {
    const d = makeActionData(id, "number", label, dflt);
    d.allowDecimals = allowDec;
    d.minValue = min;
    d.maxValue = max;
    return d;
}

// Shared functions which create both a format string and data array.

function makeCommonData(id) {
    let format = "Instance\n" + EM + "Name{0}";
    const data = [ makeTextData(id + ".name", "Instance Name") ];
    return [ format, data ];
}

function appendScopeData(id, data, defaultScope = "Shared") {
    const format = `Engine\nInstance{${data.length}}`;
    data.push(
        makeChoiceData("script.d.scope", "Engine Instance", ["Shared", "Private"], defaultScope),
        // makeChoiceData(id + ".scope", "Engine Instance", ["Shared", "Private"], defaultScope),
    );
    return format;
}

function appendStateOptionData(id, data) {
    data.push(
        makeChoiceData(id + ".state", "Create State", ["Yes", "No"]),
    );
    return `Create\n${EN}State{${data.length-1}}`;
}

function appendPersistOptionData(id, data) {
    let format = `| Instance\n| Persistence{${data.length}}`;
    data.push(
        makeChoiceData(id + ".save", "Persistence", [
            "Session",
            "Temporary",
            "Saved, load with:\n"+
            " Fixed Value",
            "Saved, load with:\n"+
            " Custom Expression",
            "Saved, load with:\n"+
            " Last Expression"
        ]),
    );
    return format + appendSaveOptionData(id, data);
}

function appendPersistOnlyOptionData(id, data) {
    let format = `Instance\nPersistence{${data.length}}`;
    data.push(
        makeChoiceData(id + ".save", "Persistence", [
            "Session",
            "Temporary",
            "Saved",
        ]),
    );
    return format;
}

function appendSaveOptionData(id, data) {
    // let format = appendPersistOptionData(id, data, true);
    let format = `Load w/\nVal/Expr{${data.length}}`;
    data.push(
        makeTextData(id + ".default", "Default Value/Expression"),
    );
    return format;
}

function appendHoldOptionData(id, data) {
    let format = `| On\n| Hold{${data.length}}`;
    data.push(
        makeChoiceData(id + ".activation", "Oh Hold Behavior", [
            "On Press",
            "On Press &\nRelease",
            "On Press\nthen Repeat",
            "Repeat\nafter Delay",
            "On Release",
        ]),
    );
    return format;
}

// --------------------------------------
// Action creation functions

function addEvalAction(name)
{
    const id = "script.eval";
    const descript = SHORT_NAME + ": Evaluate an Expression. Evaluation result, if any, can be returned as a TP State value of the same Name as the Instance.\n" +
        "Any JavaScript is valid here, from simple math to string formatting to short scripts. TP State and Value macros can be embedded. Strings must be quoted.";
    let [format, data] = makeCommonData(id);
    let i = data.length;
    format += `Evaluate\nExpression{${i++}}`;
    data.push(
        makeTextData(id + ".expr", "Expression"),
    );
    format += appendScopeData(id, data);
    format += appendStateOptionData(id, data);
    const cdata = data.map(a => ({...a}));
    addConnector(id, name, descript, format + appendPersistOnlyOptionData(id, cdata), cdata);
    format += appendPersistOptionData(id, data);
    format += appendHoldOptionData(id, data);
    addAction(id, name, descript, format, data, true);
}

function addScriptAction(name)
{
    const id = "script.load";
    const descript = SHORT_NAME + ": Load and Run a Script. Evaluation result, if any, can be returned as a TP State value of the same Name as the Instance.\n" +
        "An optional expression can be appended to the file contents, for example to run a function with dynamic value arguments. JS syntax rules apply, strings must be quoted.";
    let [format, data] = makeCommonData(id);
    let i = data.length;
    format += `Script\n${EN}${SP}File{${i++}} Append\nExpression{${i++}}`;
    data.push(
        makeFileData(id + ".file", "Script File"),
        makeTextData(id + ".expr", "Append Expression", "run([arguments])"),
    );
    format += appendScopeData(id, data);
    format += appendStateOptionData(id, data);
    format += appendPersistOptionData(id, data);
    format += appendHoldOptionData(id, data);
    addAction(id, name, descript, format, data, true);
    // No connector for script types, too much I/O
}

function addModuleAction(name)
{
    const id = "script.import";
    const descript = SHORT_NAME + ": Import a JavaScript Module. Modules can load other modules and are cached for improved performance.\n" +
        "Module properties are accessed via the alias (like in JS). An optional JavaScript expression can be evaluated after the import, eg. to run a function with dynamic value arguments.";
    let [format, data] = makeCommonData(id);
    let i = data.length;
    format += `import {*}\nas (alias){${i++}} from\n(file){${i++}} and evaluate\n${EN}expression{${i++}}`;
    data.push(
        makeTextData(id + ".alias", "Module Alias", "M"),
        makeFileData(id + ".file", "Module File"),
        makeTextData(id + ".expr", "Expression", "M.run([arguments])"),
    );
    format += appendScopeData(id, data);
    format += appendStateOptionData(id, data);
    const cdata = data.map(a => ({...a}));
    addConnector(id, name, descript, format + appendPersistOnlyOptionData(id, cdata), cdata);
    format += appendPersistOptionData(id, data);
    format += appendHoldOptionData(id, data);
    addAction(id, name, descript, format, data, true);
}

function addUpdateAction(name)
{
    const id = "script.update";
    const descript = SHORT_NAME + ": Update an Existing Instance. Use this action as a quick way to evaluate an expression.\n" +
        "Any existing Script Instance can be used. If the Instance created a State, returning a value from this expression will update that State.";
    let format = "Instance{0} Evaluate\nExpression{1}";
    const data = [
        makeChoiceData(id + ".name", "Instance Name", ["[ no instances created ]"], "select instance..."),
        makeTextData(id + ".expr", "Expression"),
    ];
    addConnector(id, name, descript, format, data);
    format += appendHoldOptionData(id, data);
    addAction(id, name, descript, format, data, true);
}

// System utility action

function addSystemActions()
{
    var id = "plugin.instance";
    addAction(id, "Instance Control Actions",
        SHORT_NAME + ": Instance Control Actions. Choose an action to perform and which script/engine instance(s) it should affect. \n" +
            "'Delete Script' also deletes Private engine if no other Scripts are using it. " +
            "'Reset Engine' means setting the global script environment back to default. " +
            "'Delete Engine' also deletes any related Script Instances. ",
        "Action: {0} Instance(s): {1}",
        [
            makeChoiceData(id + ".action", "Action to Perform", [
                "Delete Script Instance",
                "Save Script Instance",
                "Load Script Instance",
                "Remove Saved Instance Data",
                "Reset Engine Environment",
                "Delete Engine Instance"
            ], "select an action..."),
            makeChoiceData(id + ".name", "Instance for Action", ["[ no instances created ]"], "select an action first"),
        ]
    );

    id = "plugin.repRate";
    addAction(id, "Set Held Action Repeat Rate/Delay",
        SHORT_NAME + ": Set/Adjust Held Action Repeat Rate/Delay.\n" +
            "The value(s) can be set for either the global default or per existing script Instance. Fastest rate/shortest delay is 50 milliseconds.",
        "{0} the {1} Repeat {2} to/by {3} (milliseconds)",
        [
            makeChoiceData(id + ".action", "Action", ["Set", "Increment", "Decrement"]),
            makeChoiceData(id + ".name", "Instance(s)", ["Default"]),
            makeChoiceData(id + ".param", "Parameter", ["Rate", "Delay", "Rate & Delay"]),
            makeTextData(id + ".value", "To/By"),
        ],
        true
    );
    addConnector(id, "Set Held Action Repeat Rate/Delay",
        SHORT_NAME + ": Set Held Action Repeat Rate/Delay within a given range. \n" +
            "The value(s) can be set for either the global default or per existing script Instance. Fastest rate/shortest delay is 50 milliseconds.",
        "Set the {0} Held Action Repeat {1} in range of {2} to {3} (milliseconds, 50ms minimum)",
        [
            makeChoiceData(id + ".name", "Instance(s)", ["Default"]),
            makeChoiceData(id + ".param", "Parameter", ["Rate", "Delay", "Rate & Delay"]),
            makeTextData(id + ".rangeMin", "Range Minimum", "1000"),
            makeTextData(id + ".rangeMax", "Range Maximum", "100"),
            makeTextData(id + ".action", "", "Set"),  // hidden
        ]
    );

    if (DEV_MODE) {
        addAction("plugin.shutdown", "Shut Down", "Shut Down", "Shut down plugin");
    }
}


// ------------------------
// Build the full entry.tp object for JSON dump

addEvalAction("Evaluate Expression");
addScriptAction("Load Script from File");
addModuleAction("Import Module from File");
addUpdateAction("Update Existing Instance");
// Misc actions
addSystemActions();


// Output

const output = JSON.stringify(entry_base, null, 4);
if (OUTPUT_PATH === '-') {
    console.log(output);
    process.exit(0);
}

const outfile = path.join(OUTPUT_PATH, "entry.tp");
fs.writeFileSync(outfile, output);
console.log("Wrote version", iVersion.toString(16), "output to file:", outfile);
if (DEV_MODE) {
    console.warn("!!!=== Generated DEV MODE entry.tp file ===!!!");
    process.exit(1);  // exit with error to prevent accidental usage with build scripts.
}
process.exit(0);
